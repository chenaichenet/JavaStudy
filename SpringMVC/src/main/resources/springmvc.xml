<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--声明组件扫描器-->
<!--    <context:component-scan base-package="com.demo1.controller,com.demo2.controller,com.demo3.controller,com.demo4.controller,com.mytest.controller"/>-->
    <!--处理异常，要扫描handler包-->
    <context:component-scan base-package="*.*.controller,com.demo6.handler"/>
    <!--声明springmvc框架中的视图解析器，可以帮助开发人员设置视图文件的路径-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!--前缀：视图文件的路径-->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <!--后缀：视图文件的扩展名-->
        <property name="suffix" value=".jsp"/>
    </bean>
    <!--注解驱动-->
    <mvc:annotation-driven/>
    
    <!--中央调度器url-partten设置成“/”后访问静态资源，第一种方式
        原理：使用<mvc:default-servlet-handler/>，在springmvc.xml中声明后，springmvc框架会在容器中创建DefaultServletHttpRequestHandler处理类对象。
        它会对进入DispatcherServlet的URL进行筛选，如果发现是静态资源的请求，就将该请求转由web应用服务器默认的Servlet处理。
        而这个默认的Servlet就是DefaultServlet。-->
    <mvc:default-servlet-handler/>
    <!--第二种方式
        在Spring3.0后，Spring定义了专门处理静态资源访问请求的处理器ResourceHttpRequestHandler，并且添加了<mvc:resources/>标签，专门用于解决静态资源无法访问的问题。
        如<mvc:resources location"/images/" mapping="/images/**"/>
            location：表示静态资源所在的目录，目录不能使用WEB-INF及其子目录。
            mapping：表示对该资源的请求，以/images/开始的请求，如/images/beauty.jpg等。注意后面是两个*号。-->
<!--    <mvc:resources location="/images/" mapping="/images/**"/>-->
    
    <!--声明拦截器，拦截器可以有多个
        在框架中保存多个拦截器是ArrayList，按照声明的先后顺序-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--指定拦截的请求uri地址-->
            <mvc:mapping path="/doInterceptor.do"/>
            <!--声明拦截对象-->
            <bean class="com.demo7.handler.MyInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/doLogin.do"/>
            <bean class="com.demo8.handler.MyInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>